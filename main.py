#TRABAJO INTEGRADOR

#FASE DE EXTRACCION.
#PARA LA CONSIGNA DE ESTE PROYECTO SE ESCOGIO UNA API QUE RECOGE
#INFORMACION HISTORICA SOBRE EL MERCADO DE VALORES DE ESTADOS UNIDOS.
#LA API PERTENECE A "EODHD APIS".
#EL ACCESO ES GRATUITO Y REQUIERE DE VALIDACION A TRAVES DE UN TOKEN
#QUE ESTA PROVISTO EN EL ARCHIVO "CONFIG.INI", PERO TIENE LA LIMITANTE DE QUE SOLO
#PODEMOS EXTRAER INFORMACION HISTORICA DE HASTA HACE 1 AÃ‘O COMO MAXIMO.

#LOS ENDPOINT UTILIZADOS SON LOS SIGUIENTES:
#-https://eodhd.com/api/eod/{TICKER_ACCION}.US?from={FECHA_INICIO}&to={FECHA_FIN}&period={PERIODO}&api_token={TOKEN}}&fmt={FORMATO}
#PARA CONSULTAR LAS COTIZACIONES DE LA ACCION (STOCK) DESEADA EN UN PERIODO DETERMINADO.
#LA EXTRACCION DE LAS COTIZACIONES SERA DE TIPO INCREMENTAL USANDO EL CRITERIO DE FECHA.
#LA APLICACION ES STATEFULL Y GUARDA LA FECHA EN QUE SE ACTUALIZARON LOS DATOS POR ULTIMA VEZ.
#ESTO LO HACE PARA CADA ACCION INDIVIDUAL

#-https://eodhd.com/api/exchange-symbol-list/{MERCADO}?api_token={TOKEN}&fmt={FORMATO}
#PARA OBTENER INFORMACION SOBRE TODOS LAS ACCIONES QUE COTIZAN EN EL MERCADO DE USA.
#ESTO NOS DARA DETALLES COMO POR EJ LOS NOMBRE DE LA CIA, EN QUE EXCHANGE 
#SE INTERCAMBIAN, SU ISIN (CODIGO QUE LA IDENTIFICA INTERNACIONALMENTE), ENTRE OTRAS COSAS.
#LA EXTRACCION DE LOS MERCADOS ES FULL, EN CADA REQUEST SE PIDEN TODOS LOS DATOS DE CADA MERCADO.
#LA APP GUARDA LA FEHCA DE ACTUALIZACION DE LOS MISMOS PERO ES A FIN INFORMATIVO, NO ES UN PARAMETRO PARA LA EXTRACCION.


#FASE DE ALMACENAMIENTO
#LUEGO DE REALIZAR LA REQUEST Y OBTENER LA INFORMACION EN FORMATO JSON, 
#SE CREA UN DF A PARTIR DEL MISMO Y SE GUARDA EN FORMATO PARQUET.
#LOS DIRECTORIOS SE GENERAN DINAMICAMENTE, COMO RAIZ DEL PROYECTO SE UTILIZARA LA CARPETA DONDE SE ENCUENTRE
#GUARDADO EL ARCHVIO "CONEXION_API.PY".
#POR ULTIMO SE REALIZA LA CARGA A LA BASE DE DATOS POSTGRE HOSTEADA EN AIVEN.

#ALAMCENAMIENTO EN PARQUET:
#-SE CREARA UN DIRECTORIO LLAMADO "STOCKS" PARA LAS SERIES HISTORICAS DE PRECIOS.
#LA PARTICION QUE SE UTILIZARA PARA ESTA TABLA SERA "STOCK_YEAR"-"STOCK_MONTH"-"STOCK_DAY"-"STOCK_TICKER". 
#-SE CREA UN DIRECOTRIO "MARKETS" QUE ALMACENA LA INFORMACION OBTENIDA DEL SEGUNDO ENDPOINT.
#ESTA SE PARTICIONARA A TRAVES DEL CAMPO "MARKET_EXCHANGE".

#ALMACENAMIENTO BD POSTGRE EN AIVEN:
#RESPECTO A LA BD, TENDREMOS 2 SCHEMAS, UNO DE STAGE Y UNO DE WAREHOUSE.
#AMBOS TENDRAN DOS TABLAS, LA TABLA DE "STOCK_PRICES" SERA NUESTRA TABLA DE FACTS Y
#LA TABLA DE "MARKETS" SE UTILIZA COMO TABLA DE DIMENSION.
#EN EL SCHEMA WAREHOUSE ES POSIBLE HACER JOIN ENTRE LAS TABLAS A TRAVES DEL CAMPO 
#STOCK_PRICES.STOCK_TICKER (FOREIGN KEY) Y MARKET.MARKET_STOCKID (PRIMARY KEY) EN LA TABLA DE MARKETS.
#PARA CARGAR LA INFORMACION SE UTILIZARA LA ESTRATEGIA DE SCD TIPO 0 
#DEBIDO A QUE SON DATOS ESTATICOS QUE NO DEBERIAN RECIBIR MODIFCACIONES 


#EJEMPLO PRACTICO - OBTENEMOS INFO SOBRE LOS MERCADOS NASDAQ Y NYSE, Y SOBRE LAS ACCIONES DE APPLE Y MICROSOFT

#PRIMERO IMPORTAMOS LOS MODULOS API_MANAGER Y DB_MANAGER, ESTOS NOS SIMPLIFICARAN EL TRABAJO
#CON LAS CONSULTAS A LA API Y LA BASE DE DATOS. ESTAN DOCUMENTADOS EN SUS PROPIOS SCRYPTS
import API_manager, DB_manager


#CREAMOS 4 OBJS DE LA CLASE MANAGER DEL MODULO API_MANAGER PARA ALMACENAR CADA CONSULTA POR SEPARADO
consulta_NYSE=API_manager.manager()
consulta_NASDAQ=API_manager.manager()
consulta_APPLE=API_manager.manager()
consulta_MICROSOFT=API_manager.manager()

#REALIZAMOS LAS CONSULTAS A LA API SOBRE LOS ITEMS DESEADOS Y GUARDAMOS LOS DATOS EN FORMATO PARQUET
#AL EJECUTARSE LAS FUNCIONES DE GETMARKETDATA Y GETSTOCKDATA, SE GENERAN AUTOMATICAMENTE DF QUE SE ALMACENAN
#DENTRO DEL OBJETO CONSULTA
consulta_NASDAQ.getMarketData("NASDAQ")
consulta_NASDAQ.save_to_parquet()

consulta_NYSE.getMarketData("NYSE")
consulta_NYSE.save_to_parquet()

consulta_APPLE.getStockData("AAPL")
consulta_APPLE.save_to_parquet()

consulta_MICROSOFT.getStockData("MSFT")
consulta_MICROSOFT.save_to_parquet()

#CREAMOS OBJ DEL TIPO MANAGER DEL MODULO DB_MANAGER
db_manager=DB_manager.manager()

#CREAMOS LAS TABLAS EN LA BASE DE DATOS
db_manager.createTables()

#COMENZAMOS CON LA CARGA EN LA BASE DE DATOS
#AQUI USAREMOS EL LOS DF DE CADA CONSULTA PARA PASARLOS AL METODO SAVE_TO_STAGE, EL DF SE CARGARA
#AL SCHEMA DE STAGE CON EL METODO .TO_SQL Y POSTERIORMENTE CORREMOS LA FUNCION COMMIT_TO_WAREHOUSE
#PARA SUBIR LA INFO EN LAS TABLAS DE STAGE AL DATAWAREHOUSE
db_manager.save_to_stage("stg_markets",consulta_NASDAQ.df)
db_manager.commit_to_warehouse("markets")

db_manager.save_to_stage("stg_markets",consulta_NYSE.df)
db_manager.commit_to_warehouse("markets")

db_manager.save_to_stage("stg_stock_prices",consulta_APPLE.df)
db_manager.commit_to_warehouse("stock_prices")

db_manager.save_to_stage("stg_stock_prices",consulta_MICROSOFT.df)
db_manager.commit_to_warehouse("stock_prices")

# POR ULTIMO REALIZAMOS UNA QUERY PARA OBTENER LA ULTIMA COTIZACION DISPONIBLE DE LA ACCION DESEADA.
db_manager.get_last_price("AAPL")

#EN CASO DE QUERER RESTAURAR EL PROYECTO AL ESTADO INCIAL UTILIZAR SCRYPT "REBOOT.PY"